---
title: "module4"
author: "Maseeng"
date: "9/30/2020"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{module4_vignette}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


```{r, warning = FALSE, message = FALSE}
library(mjm346)

library(dplyr)
library(tidyr)
library(ggplot2)

```


1. Create three `tibble`s, `t1`, `t2`, `t3`. `t1` has 10 rows, with column `V1` containing values G1 through G10, and `V2` containing `runif` between 75 and 125.  `t2` has 15 rows with `v1` (G1 - G15) and `v3` containing a random selection of `LETTERS` A-F. `t3` has 20 rows (`v1` with G1-G20), and `v4` with numbers from the random normal distribution (`mean` = 100, `sd` = 20). Use a seed of 1 for random numbers. Join `t1`, `t2`, and `t3` within a single pipeline, using:
  - `left_join`
  - `right_join`
  - `full_join`
  - `inner_join`
  
# Solution to question 1

```{r, warning = FALSE, message = FALSE}

t1 <- tibble(V1 = paste0("G", 1:10), V2 = runif(10, 75, 125))
t1

t2 <- tibble(v1 = paste0("G", 1:15), v3 = LETTERS[sample(1:6, 15, replace = TRUE)])
t2

set.seed(1)
t3 <- tibble(v1 = paste0("G", 1:20), v4 = rnorm(20, mean = 100, sd = 20))
t3

```


```{r, warning = FALSE, message = FALSE}

left_join(x = t1, y = t2, by = c("V1"="v1"))
Concatenate_t1 <- left_join(x = t1, y = t2, by = c("V1"="v1")) %>% 
  left_join(., y = t3, by = c("V1"="v1"))
Concatenate_t1

right_join(x = t1, y = t2, by = c("V1"="v1"))
Concatenate_t2 <- right_join(x = t1, y = t2, by = c("V1"="v1")) %>% 
  right_join(., y = t3, by = c("V1" = "v1"))
Concatenate_t2

full_join(x = t1, y = t2, by = c("V1"="v1"))
Concatenate_t3 <- full_join(x = t1, y = t2, by = c("V1"="v1")) %>% 
  full_join(., y = t3, by = c("V1" = "v1"))
Concatenate_t3

inner_join(x = t1, y = t2, by = c("V1"="v1"))
Concatenate_t4 <- inner_join(x = t1, y = t2, by = c("V1"="v1")) %>% 
  inner_join(., y = t3, by = c("V1" = "v1"))
Concatenate_t4

```


2. Recreate the `crop_ylds` dataset, using 1) an `lapply` to read in each .csv file from the package `extdata/` folder, and 2) the `dplyr` steps necessary to `*_join` the data and make the necessary `mutate`-ations. Chunks 1, 11, 19, and 21 are your guides.

# Solution to question 2

```{r, warning = FALSE, message = FALSE}

fs <- dir(system.file("extdata/", package = "geospaar"), 
          pattern = "FAOSTAT", full.names = TRUE)
fs

crops <- lapply(fs, readr::read_csv)

crops_df <- do.call(rbind, lapply(crops, function(x) {
  x %>% dplyr::select(Item, Area, Element, Year, Value) %>% 
    pivot_wider(names_from = Element, values_from = Value) %>% 
    rename(crop = Item, country = Area, year = Year, 
           harv_area = `Area harvested`, prod = Production)
}))
crops_df

crop_ylds <- crops_df %>% mutate(yield = prod / harv_area)
crop_ylds

crop_ylds <- crop_ylds %>% 
  mutate(country = ifelse(country == "South Africa", "ZAF", country)) %>%  
  mutate(country = ifelse(country == "Zambia", "ZMB", country)) %>% 
  mutate(crop = tolower(crop))
set.seed(1)
crop_ylds %>% sample_n(5)

```


3. Use `dplyr` verbs to select the 5 top-ranked years for total harvested area for South African maize. Do the same for South African maize yields. To do this, you will need to use `filter`, `arrange`, and `slice`. The outputs for each test should be the 5 rows of `crop_ylds` that meet these criteria.

# Solution to question 3

```{r, warning = FALSE, message = FALSE}

crop_ylds %>% filter(crop == "maize" & country == "ZAF") %>% group_by(crop, country) %>% 
arrange(., desc (harv_area)) %>%
slice(1:5)


crop_ylds %>% filter(crop == "maize" & country == "ZAF") %>% group_by(crop, country) %>% 
arrange(., desc ("yield")) %>% 
slice(1:5)

```


4. Calculate the mean of each crop's yield (across both countries) using SAC based on `dplyr`, as well as an `sapply` using base `R` syntax within the `sapply` to subset on crop (note, subsetting a tibble is a bit different, so use this syntax to do the job within the `sapply`: `mean(crop_ylds[crop_ylds$crop == x, ]$yield)`) 

# Solution to question 4

```{r, warning = FALSE, message = FALSE}

crop_ylds %>% group_by(crop) %>% summarize(mean_yield = mean(yield))

splt_apply <- sapply(unique(crop_ylds$crop), function(x) {
    mean_yield <- mean(crop_ylds[crop_ylds$crop == x, ]$yield) 
})

splt_apply

```


5. Calculate a correlation matrix between *harv_area* and *yield* for each crop-country combination, using `dplyr` verbs. Arrange the result (negative to positive) by the value of the correlation coefficient. See Chunk 34 for guidance.

# Solution to question 5

```{r, warning = FALSE, message = FALSE}

crop_ylds %>% group_by(crop, country) %>% summarize(cor = cor(yield, harv_area)) %>%    arrange(cor)

```


6. Create a single scatter plot with `ggplot` that shows the relationship between *harv_area* (x-axis) and *yield* (y-axis) for maize, separated by country on a single plot. Make it a point scatter plot, with a straight trendline fit through each set of points (i.e. `method = "lm"`). You will need to use `geom_point` and `geom_smooth`. Make a title ("Harvested area versus yield") and x ("Harvested area (ha)") and y ("Yield (t/ha)") labels. 

# Solution to question 6

``````{r, fig.width=4.75, fig.height=3.75, fig.align = "center"}

crop_ylds %>% filter(crop == "maize") %>% 
  ggplot() + geom_point(aes(x = harv_area, y = yield, color = country)) +
  geom_smooth(aes(x = harv_area, y = yield, color = country), method = "lm") + 
  scale_color_manual(values = c("red", "blue")) + 
  xlab("Harvested area (ha)") + ylab("Yield (tons / ha)") + 
  ggtitle("Harvested area versus yield")

```


7. Create a single scatter plot with `graphics::plot` that plots just South Africa wheat yields (y-axis) against year (x-axis). Plot the points, and then add a linear trendline to it, by wrapping the `abline` around the `lm` function. Make the points solid grey ("grey") and the `abline` blue. Label the y axis as "Yield (t/ha)". Remove the x-axis label. Give a title: "South African wheat (1961-2017)". Chunk 54 is your guide. 

# Solution to question 7

``````{r, fig.width=4.75, fig.height=3.75, fig.align = "center"}

zaf_wheat <- crop_ylds %>% filter(crop == "wheat" & country == "ZAF")
yl <- range(crop_ylds[crop_ylds$crop == "wheat", "yield"])
{plot(yield ~ year, data = zaf_wheat, pch = 16, col = "grey", 
     ylim = yl, main = "South African wheat (1961-2017)",
     xlab = "", ylab = "Yield (t/ha)")
abline(lm(yield ~ year, data = zaf_wheat), col = "blue")}
 
```


8. Use `ggplot` to make a 5-bin histogram of Zambia's maize yields. The x-label should be "Yield (t/ha)", the title should be "Zambian Maize", and bins should be blue with black outlines. 

# Solution to question 8

``````{r, fig.width=4.75, fig.height=3.75, fig.align = "center"}

crop_ylds %>% filter(crop == "maize" & country == "ZMB") %>%
  ggplot() + 
  geom_histogram(aes(x = yield), bins = 5, fill = "blue", col = "black") +
  xlab("Yield (t/ha")+
  ggtitle("Zambian Maize")

```
